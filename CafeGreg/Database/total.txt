------------	Template

order_status = ['pending','ordered','in preparation','ready','received','paid','canceled']

order_status_history = {
	order_id,
	status_code,
	time_set
}

order = {
	_id:'',
	changes: [
		{ ingredients_id, code_change}
	]
}

ingredient_changes = ["without","with","a lot of", "aside"]

ingredient = {
    _id,
    name,
	img,
	changes_detail : [ {change_code, price} ] (optionnal)
  }
	
}

product = {
    _id,
    name,
    description,
    price,
    img,
    ingredients: [],
	destination
}

product_destination = ['kitchen','bar']


customer = {
	_id: tz,
	contact: email/phone,
}

order_history = {
	customers_id: [],
	orders_id: []
}

autorizations_sended = {
	customer_id,
	sended_time
}

table = {
	_id,
	customers: [], can be empty if the customer dont want to log 
	orders: []
}

sections = {
	_id,
	name,
	picture,
	parent_id,
	products: [] 
}

if parent_id does not exist these section are in the main so show them
if exist 
	if the array products exist show products
	if not exist show every section with the parent_id of the id 

website = {
	login, (encoded)
	password,(encoded)
	recovery_email (encoded)
}

delays_details = [name, delay]

------------	Collections

//cafe side 

	orders
	order_status_history
	ingredients
	products
X	customers
	order_history
	autorizations_sended
	tables
	section
X	order_status
X	ingredient_changes
X	product_destination
X	website
	delays_details

//worker side
	
	
	
//add ranks and optionnal comment

//add workers with start and end service 
	with the id of who start or end the service

------------	MongoDB

use cafeGregDB

db.order_status.insertMany([
  { _id: 0, status: "pending" },
  { _id: 1, status: "ordered" },
  { _id: 2, status: "in preparation" },
  { _id: 3, status: "ready" },
  { _id: 4, status: "received" },
  { _id: 5, status: "paid" },
  { _id: 6, status: "canceled" }
])


db.order_destination.insertMany([
	{ _id: 0, destination: 'kitchen'},
	{ _id: 1, destination: 'bar'}
])


db.ingredient_changes.insertMany([
	{_id: 0, change: 'without'},
	{_id: 1, change: 'with'},
	{_id: 2, change: 'a lot of'},
	{_id: 3, change: 'aside'}
])


db.customers.insertMany([
	{
		_id: '345538268',
		contact: '0584020406'
	},
	{
		_id: '345481402',
		contact: 'nathanmimoun2001@gmail.com'
	}
])

db.website.insertMany([{
		login: 'CafeGreg',
		password: '123',
		recovery_email: 'nathanmimoun2001@gmail.com'
}])

db.createCollection("tables")


------------	Functions

X	customer_register(id, contact)
X	customer_login(id, table)
X	login_website(login, password)
X	change_login_website(login, password)
X	add_customer_to_table(id, table)
X	erase_customer_of_the_table(customer, table)
X	customer_is_connected(id)
X	table_exist(id)
X	transfer_customer_to_table(customer, table)
X	Switch two tables 
	Get an order history according to an id
	Get the ingredients of the order
	
------------	Algorythms help

Register for customer : 	Check if the id is already used
				if yes get an error message
				if not check if we got an email or a phone number
					if yes add it to the customers and add his id to the table
					if not send and error message
					
Login for customer : 	Check if the id exist 
				if yes check if the contacts match
					if yes send a message to get the autorization (by email or by phone) 
					and set in autorization_collection the id and the hours/minutes/seconds
					(like that he can't press on "send a message" 2 times in less that 1 minutes)
						when clicked on "it's me" on the message add the id to the table, remove the autorization (with the id)
					if not send an error message
				if not get an error message
				
				
------------	 MongoDB functions

function customer_register(id, contact){
	if(!id || !contact){
		print("A parameter is missing")
		return;
	}
	var exist = db.customers.findOne({_id:id,contact})
	if(exist){
		print(`User ${id} already exist please login.`)
	}
	else{
		//Send a message to the contact to check id
		
		//After the verification :		
		db.customers.insertOne({_id:id,contact})
		print(`Registered successfully.`)
	}
}

function add_customer_to_table(id, table){	
	//if the table exist
	var tableExist = db.tables.findOne({_id:table})
	if(tableExist){		
		//Check that he is not already at a table
		var alreadyIn = db.tables.findOne({customers: {$in: [id]}})			
		if(alreadyIn){
			print(`${id} is already in the table ${alreadyIn._id}`)
		}
		else{
			db.tables.updateOne({_id:table}, {$push:{customers: id}})
			print(`Customer ${id} has been added to the table ${table}`)
		}
	}
	else{
		//if the table doesnt exist
		db.tables.insertOne({_id:table, customers: [id]})		
	}		
}

function customer_login(id, table){
	if(!id || !table){
		print("A parameter is missing")
		return;
	}	
	var customer = db.customers.findOne({_id:id})
	if(!customer){
		print(`User ${id} does not exist please register.`)
	}
	else{
		//Add the customer to the table
		add_customer_to_table(id, table)
		print(`Logged successfully. ${id} added to the table ${table}`)
	}
}


function login_website(login, password){
	var log = db.website.findOne({login, password})
	if(log){
		print('Connecting')
	}
	else {
		print('Error')
	}
}


function change_login_website(login, password){
    if (login) {
        var precLog = db.website.findOne().login;
        db.website.updateOne({}, { $set: { login: login } });
        print(`Login changed from ${precLog} to ${login}`);
    }
    if (password) {
        var precPass = db.website.findOne().password;
        db.website.updateOne({}, { $set: { password: password } });
        print(`Password changed from ${precPass} to ${password}`);
    }
}

function customer_is_connected(id){
	if(!id){
		print('Id is missing')
		return;
	}
	var table = db.tables.findOne({customers:{$in:[id]}})
	return table ? ({connected:true,table_id:table._id}) : ({connected:false});
}

function table_exist(id){
	if(!id){
		print('Id is missing')
		return false;
	}
	var table = db.tables.findOne({_id:id})
	return table ? true : false;
}

function erase_customer_of_the_table(customer, table){
	if(!customer || !table){
		print('Parameter is missing')
		return
	}	
	db.tables.updateOne({_id: table},{$pull:{ customers: customer}})
	print(`Customer ${customer} has been removed from the table ${table}`)
}

function transfer_customer_to_table(customer, table){
	//check if the customer is connected
	var res = customer_is_connected(customer)
	
	if(!res.connected){
		print(`${customer} is not connected`)
		return
	}	
	
	//erase the customer in the prec table
	erase_customer_of_the_table(customer, res.table_id)
		
	//create the table and add the customer
	add_customer_to_table(customer, table)		
}


function switch_tables(table_1,table_2){

var tempTables = [
	db.tables.findOne({_id:table_1}),
	db.tables.findOne({_id:table_2})
	]

if(!tempTables[0]){
	db.tables.insertOne({_id:table_1})
	tempTables[0] = {_id:table_1}
}

if(!tempTables[1]){
	db.tables.insertOne({_id:table_2})
	tempTables[1] = {_id:table_2}
}
	
db.tables.deleteOne({_id:table_1})
db.tables.deleteOne({_id:table_2})

delete tempTables[0]._id
delete tempTables[1]._id

db.tables.insertOne({...tempTables[0], _id:table_2})
db.tables.insertOne({...tempTables[1], _id:table_1})


print(`The table ${table_1} and the table ${table_2} have been switched`)
}


------------	Functions to check 

function productIngredients(id) {
  var ingredientsId = db.products.findOne({_id: id}).ingredients;
  var ingredients = [];

  ingredientsId.forEach(function(ingredientId) {
    var tempAdd = db.ingredients.findOne({_id: ingredientId});

    if (!tempAdd) {
      print('ERR: Ingredient with ID ' + ingredientId + ' not found');
    } else {
      ingredients.push(tempAdd);
    }
  });
  printjson(ingredients);
}


------------	Problems

- In a few menus you got a free drink/bread/salad to choose

- There are ingredient that I want to add to meals but not to drinks 
ex : add a tomato to my tea or add ice cube to my salade ?



