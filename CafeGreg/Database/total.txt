
		Cafe	Greg	DataBase

------------	Template

order_status = ['pending','ordered','in preparation','ready','received','paid','canceled']

order_status_history = {
	order_id,
	status,
	time_set
}

order = {
	_id:'',
	changes: [
		{ ingredients_id, code_change}
	]
}

ingredient_changes = ["without","with","a lot of", "aside"]

ingredient = {
    _id,
    name,
	img,
	[ {change_code, price} ]
  }
	
}


product = {
	_id,
	link_id
}


order_destination = ['kitchen','bar']


food = {
    _id,
    name,
    description,
    price,
    picture_link,
    ingredients: [],
	destination
}

dessert = {
    _id,
    name,
    description,
    price,
    picture_link,
    ingredients: [],
	destination
}


drink = {
	_id,
	name,
	price,
	picture_link,
	destination
}


customer = {
	_id: tz,
	contact: email/phone,
}

order_history = {
	customers_id: [],
	orders_id: []
}

autorizations_sended = {
	customer_id,
	sended_time
}

table = {
	_id,
	customers: [], can be empty if the customer dont want to log 
	orders: []
}

sections = {
	_id,
	name,
	picture,
	parent_id,
	products: [] 
}

if parent_id does not exist these section are in the main so show them
if exist 
	if the array products exist show products
	if not exist show every section with the parent_id of the id 

website = {
	login, (encoded)
	password,(encoded)
	recovery_email (encoded)
}

delays_details = [name, delay]

------------	Collections

	order
	order_status_history
	ingredient
	product
	food
	drink
	dessert
X	customer
	order_history
	autorizations_sended
	table
	section
X	order_status
X	ingredient_changes
X	order_destination
	website
	delays_details

------------	MongoDB

db.createCollection("cafeGregDB")
use cafeGregDB


db.order_status.insertMany([
  { _id: 0, status: "pending" },
  { _id: 1, status: "ordered" },
  { _id: 2, status: "in preparation" },
  { _id: 3, status: "ready" },
  { _id: 4, status: "received" },
  { _id: 5, status: "paid" },
  { _id: 6, status: "canceled" }
])


db.order_destination.insertMany([
	{ _id: 0, destination: 'kitchen'},
	{ _id: 1, destination: 'bar'}
])


db.ingredient_changes.insertMany([
	{_id: 0, change: 'without'},
	{_id: 1, change: 'with'},
	{_id: 2, change: 'a lot of'},
	{_id: 3, change: 'aside'}
])


db.customers.insertMany([
	{
		_id: '345538268',
		contact: '0584020406'
	},
	{
		_id: '345481402',
		contact: 'nathanmimoun2001@gmail'
	}
])


------------	Functions

XX	Register
X	Login
	Add customer to a table
	Check if customer is already in a table (if he is register)
	Get an order history according to an id
XX	Get the ingredients of the order

	
------------	Algorythms help

Register : 	Check if the id is already used
				if yes get an error message
				if not check if we got an email or a phone number
					if yes add it to the customers and add his id to the table
					if not send and error message
					
Login : 	Check if the id exist 
				if yes check if the contacts match
					if yes send a message to get the autorization (by email or by phone) 
					and set in autorization_collection the id and the hours/minutes/seconds
					(like that he can't press on "send a message" 2 times in less that 1 minutes)
						when clicked on "it's me" on the message add the id to the table, remove the autorization (with the id)
					if not send an error message
				if not get an error message
				
				
------------	 MongoDB functions

Register :

function register(id, contact, table){
	var exist = db.customers.findOne({_id:id,contact})
	if(exist){
		print(`User ${id} already exist please login.`)
	}
	else{
		//Send a message to the contact to check id
		print(`Registered successfully. ${id} added to the table ${table}`)
		db.customers.insertOne({_id:id,contact})
	}
}

function login(id, contact, table){
	var exist = db.customers.findOne({_id:id,contact})
	if(!exist){
		print(`User ${id} does not exist please register.`)
	}
	else{
		//Check that he is not already at a table
		print(`Logged successfully. ${id} added to the table ${table}`)
	}
}

Get the ingredients of the order :


function productIngredients(id) {
  var ingredientsId = db.products.findOne({_id: id}).ingredients;
  var ingredients = [];

  ingredientsId.forEach(function(ingredientId) {
    var tempAdd = db.ingredients.findOne({_id: ingredientId});

    if (!tempAdd) {
      print('ERR: Ingredient with ID ' + ingredientId + ' not found');
    } else {
      ingredients.push(tempAdd);
    }
  });

  printjson(ingredients);
}






------------	Problems

In a few menus you got a free drink/bread/salad to choose
There are ingredient that I want to add to meals but not to drinks ex : add a tomato to my tea or add ice cube to my salade ?
