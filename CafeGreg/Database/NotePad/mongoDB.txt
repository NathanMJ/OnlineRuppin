use CafeGregDB

db.order_status.insertMany([
  { _id: 0, status: "pending" },
  { _id: 1, status: "ordered" },
  { _id: 2, status: "in preparation" },
  { _id: 3, status: "ready" },
  { _id: 4, status: "received" },
  { _id: 5, status: "paid" },
  { _id: 6, status: "canceled" }
])


db.product_destination.insertMany([
	{ _id: 0, destination: 'kitchen'},
	{ _id: 1, destination: 'bar'}
])


db.ingredient_changes.insertMany([
	{_id: 0, change: 'without'},
	{_id: 1, change: 'with'},
	{_id: 2, change: 'a lot of'},
	{_id: 3, change: 'aside'}
])


db.customers.insertMany([
	{
		_id: '345538268',
		contact: '0584020406'
	},
	{
		_id: '345481402',
		contact: 'nathanmimoun2001@gmail.com'
	}
])

db.website.insertMany([{
		login: 'CafeGreg',
		password: '123',
		recovery_email: 'nathanmimoun2001@gmail.com'
}])

db.createCollection("tables")

Menu
	Most ordered
	Starters
	Meals
		Main Courses
		Breakfasts
		Italians
		Sandwichs
		Salads
	Desserts
		Pancakes
		Waffles
	Drinks
		Bottles/Cans
		Beerks
	


db.sections.insertMany([
	{
		_id: 0,
		name: "Most ordered",
		img: "image.png",
		products: [0,4,5]
	},
	{
		_id: 1,
		name: "Starters",
		img: "image.png"
	},
	{
		_id: 2,
		name: "Meals",
		img: "image.png",
		child_sections: [5, 6, 7, 8, 9]
	},
	{
		_id: 3,
		name: "Desserts",
		img: "image.png",
		child_sections: [10, 11]
	},
	{
		_id: 4,
		name: "Drinks",
		img: "image.png",
		child_sections: [12, 13]
	},
	{
		_id: 5,
		name: "Main Courses",
		img: "image.png"
	},
	{
		_id: 6,
		name: "Breakfasts",
		img: "image.png",
		products: [0,1,2,3,4,5]
	},
	{
		_id: 7,
		name: "Italians",
		img: "image.png"
	},
	{
		_id: 8,
		name: "Sandwichs",
		img: "image.png"
	},
	{
		_id: 9,
		name: "Salads",
		img: "image.png"
	},
	{
		_id: 10,
		name: "Pancakes",
		img: "image.png"
	},
	{
		_id: 11,
		name: "Waffles",
		img: "image.png"
	},
	{
		_id: 12,
		name: "Bottles/Cans",
		img: "image.png"
	},
	{
		_id: 13,
		name: "Beers",
		img: "image.png",
		need_autorization : true
	}
])

db.delays_detail.insertMany([
{
	_id: 0,
	name: 'authorization_sended',
	time_sec: 10
}])

db.createCollection("authorization_sended")

db.authorization_sended.createIndex(
  { expireAt: 1 },
  { expireAfterSeconds: 0 }
)




function customer_register(id, contact){
	if(!id || !contact){
		print("A parameter is missing")
		return;
	}
	var exist = db.customers.findOne({_id:id,contact})
	if(exist){
		print(`User ${id} already exist please login.`)
	}
	else{
		//Send a message to the contact to check id
		
		//After the verification :		
		db.customers.insertOne({_id:id,contact})
		print(`Registered successfully.`)
	}
}

function add_customer_to_table(id, table){	
	//if the table exist
	var tableExist = db.tables.findOne({_id:table})
	if(tableExist){		
		//Check that he is not already at a table
		var alreadyIn = db.tables.findOne({customers: {$in: [id]}})			
		if(alreadyIn){
			print(`${id} is already in the table ${alreadyIn._id}`)
		}
		else{
			db.tables.updateOne({_id:table}, {$push:{customers: id}})
			print(`Customer ${id} has been added to the table ${table}`)
		}
	}
	else{
		//if the table doesnt exist
		db.tables.insertOne({_id:table, customers: [id]})		
	}		
}

function customer_login(id, table){
	if(!id || !table){
		print("A parameter is missing")
		return;
	}	
	var customer = db.customers.findOne({_id:id})
	if(!customer){
		print(`User ${id} does not exist please register.`)
	}
	else{
		//Add the customer to the table
		add_customer_to_table(id, table)
		print(`Logged successfully. ${id} added to the table ${table}`)
	}
}


function login_website(login, password){
	var log = db.website.findOne({login, password})
	if(log){
		print('Connecting')
	}
	else {
		print('Error')
	}
}


function change_login_website(login, password){
    if (login) {
        var precLog = db.website.findOne().login;
        db.website.updateOne({}, { $set: { login: login } });
        print(`Login changed from ${precLog} to ${login}`);
    }
    if (password) {
        var precPass = db.website.findOne().password;
        db.website.updateOne({}, { $set: { password: password } });
        print(`Password changed from ${precPass} to ${password}`);
    }
}

function customer_is_connected(id){
	if(!id){
		print('Id is missing')
		return;
	}
	var table = db.tables.findOne({customers:{$in:[id]}})
	return table ? ({connected:true,table_id:table._id}) : ({connected:false});
}

function table_exist(id){
	if(!id){
		print('Id is missing')
		return false;
	}
	var table = db.tables.findOne({_id:id})
	return table ? true : false;
}

function erase_customer_of_the_table(customer, table){
	if(!customer || !table){
		print('Parameter is missing')
		return
	}	
	db.tables.updateOne({_id: table},{$pull:{ customers: customer}})
	print(`Customer ${customer} has been removed from the table ${table}`)
}

function transfer_customer_to_table(customer, table){
	//check if the customer is connected
	var res = customer_is_connected(customer)
	
	if(!res.connected){
		print(`${customer} is not connected`)
		return
	}	
	
	//erase the customer in the prec table
	erase_customer_of_the_table(customer, res.table_id)
		
	//create the table and add the customer
	add_customer_to_table(customer, table)		
}


function switch_tables(table_1,table_2){

var tempTables = [
	db.tables.findOne({_id:table_1}),
	db.tables.findOne({_id:table_2})
	]

if(!tempTables[0]){
	db.tables.insertOne({_id:table_1})
	tempTables[0] = {_id:table_1}
}

if(!tempTables[1]){
	db.tables.insertOne({_id:table_2})
	tempTables[1] = {_id:table_2}
}
	
db.tables.deleteOne({_id:table_1})
db.tables.deleteOne({_id:table_2})

delete tempTables[0]._id 
delete tempTables[1]._id

db.tables.insertOne({...tempTables[0], _id:table_2})
db.tables.insertOne({...tempTables[1], _id:table_1})


print(`The table ${table_1} and the table ${table_2} have been switched`)
}

function send_authorization(id) {
if(!id){
	print('Id is missing')
	return
}
  var exist = db.authorization_sended.findOne({ _id: id });
  if (exist) {
    print("Authorization already exists");
    return;
  }
  var time = db.delays_detail.findOne({'name':'authorization_sended'}).time_sec
  
  time = time ? time : 10;

  db.authorization_sended.insertOne({
    _id: id,
    expireAt: new Date(Date.now() + time * 1000)
  });
}

function get_sauces(id){
var product = db.products.findOne({_id:id})
if(!product){
	print(`Product with id : ${id} does not exist`)
	return
}

var sauces = product.sauces
if(!sauces || sauces.length === 0){
	print(`${product.name} doesn't have sauces`)
	return []
}

var everySauces = []
sauces.forEach(function(id_sauce){
	var sauceFound = db.sauces.findOne({_id:id_sauce})
	if(!sauceFound){
		print(`The sauce with the id : ${id_sauce} was not found`)
	}
	else{
		everySauces.push(sauceFound)
	}
})

return everySauces
}

function get_products_from_section(id){
var products = db.sections.findOne({_id:id}).products
if(!products){
	print('No products found')
	return
}
var arrProducts = []
products.forEach(function(product){
	var productFound = db.products.findOne({_id:product})
	if(!product){
		print(`The product with the id ${product} was not found`)
	}
	else{
		arrProducts.push(productFound)
	}
})
return arrProducts
}


function get_sections_from_section(id){
var sectionsId = db.sections.findOne({_id:id}).child_sections
if(!sectionsId){
	print('No sections found')
	return
}

var sectionsArr = []
sectionsId.forEach(function(eachId){
	var section = db.sections.findOne({_id:eachId})
	if(!section){
		print(`Section ${eachId} does not exist`)
	}
	else{
		sectionsArr.push(section)
	}
})

return sectionsArr
}

function get_from_section(id){

var products = get_products_from_section(id)
if(product){
	return products
}

var sections = get_sections_from_section(id)
if(sections){
	return sections
}

print('Error in the sections')
}

------------	Functions to check 

function productIngredients(id) {
  var ingredientsId = db.products.findOne({_id: id}).ingredients;
  var ingredients = [];

  ingredientsId.forEach(function(ingredientId) {
    var tempAdd = db.ingredients.findOne({_id: ingredientId});

    if (!tempAdd) {
      print('ERR: Ingredient with ID ' + ingredientId + ' not found');
    } else {
      ingredients.push(tempAdd);
    }
  });
  printjson(ingredients);
}


------------	Products

source : https://wolt.com/en/isr/pardes-hanna/restaurant/cafe-greg-hadera?srsltid=AfmBOormuQEuNs5sXJ3QOVItfn28rKT6UFRxWGYEl8kGq7m5QZm4mT3W


db.products.insertMany([
{
	_id: 0,
	name: "Turkish Bourekas",
	img: "https://gregcafe.co.il/wp-content/uploads/2025/01/בורקס-טורקי-scaled.jpg",
	price: 59.00,
	description: "Bourekas stuffed with cheeses, served with labneh and olive oil, green tahini and spiced chickpeas, hard-boiled egg, spicy jalapeño spread, crushed tomatoes and olive oil. Served with pickles and fresh vegetables.",
	ingredient: [], 
	sauces_to_add: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
},
{
	_id: 1,
	name: "American Waffle",
	img: "https://imageproxy.wolt.com/menu/menu-images/shared/bbcd2fc0-b2d9-11ee-a2ce-2a26bf50e9fb_vafel_americai_2_photoroom.jpg?w=600",
	price: 61.00,
	description: "Crispy waffle, sautéed onions and mushrooms in four-cheese sauce, poached eggs, green onion, served with a salad of your choice.",
	ingredient: [], 
	salads_to_choose: [
	{ id:0 },
	{ id:1 },
	{ id:2 },
	{ id:3, price: 15} ] 
},
{
	_id: 2,
	name: "Norwegian Waffle",
	img: "https://imageproxy.wolt.com/menu/menu-images/shared/bf8100ce-b2d9-11ee-996c-66c5b47bd167_vafel_norvegi_photoroom.jpg?w=600",
	price: 74.00,
	description: "Crispy waffle, smoked salmon, spinach and sautéed onions in butter and cheese sauce, sunny-side-up eggs and green onion, served with a salad of your choice.",
	ingredient: [],
	salads_to_choose: [
		{ id: 0 },
		{ id: 1 },
		{ id: 2 },
		{ id: 3, price: 15 }
	],
	sauces: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
},
{
	_id: 3,
	name: "Greek Morning",
	img: "https://imageproxy.wolt.com/menu/menu-images/shared/e178d684-b2d9-11ee-8482-5e29ceb85658_boker_yevani_photoroom.jpg?w=600",
	price: 67.00,
	description: "Sunny-side up eggs served on cheese and spinach tiropita, with almond skordalia, labneh with olive oil, tomato salsa, ricotta with peppers, and Greek salad. (Served without bread)",
	ingredient: [],
	sauces: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
},
{
	_id: 4,
	name: "Eggs Benedict",
	img: "https://imageproxy.wolt.com/menu/menu-images/shared/e8222ada-b2d9-11ee-b363-a2e21199740d_benedict_photoroom.jpg?w=600",
	price: 68.00,
	description: "Brioche, spinach, hollandaise, poached eggs, onion jam, green onion and black pepper. Served with a salad of your choice.",
	ingredient: [],
	adds: [
    { name: "Mushrooms and onions", price: 10 },
    { name: "Smoked salmon", price: 15 }
	],
	salads_to_choose: [
		{ id: 0 },
		{ id: 1 },
		{ id: 2 },
		{ id: 3, price: 15 }
	],
	sauces: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
},
{
	_id: 5,
	name: "French Brioche",
	img: "https://imageproxy.wolt.com/menu/menu-images/shared/eba59912-b2d9-11ee-a7e8-e664ddb694a7_brish_tsarfati_photoroom.jpg?w=600",
	price: 68.00,
	description: "Brioche, truffle butter, mushroom Alfredo sauce, mozzarella cheese, sunny-side-up eggs and green onion. Served with a personal salad.",
	ingredient: [],
	salads_to_choose: [
		{ id: 0 },
		{ id: 1 },
		{ id: 2 },
		{ id: 3, price: 15 }
	],
	sauces: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
}])




db.sauces.insertMany([
			{ _id: 0, name: "Silan"},
			{ _id: 1, name: "Tehina"},
			{ _id: 2, name: "Pesto"},
			{ _id: 3, name: "Crushed tomatoes"},
			{ _id: 4, name: "Sweet chili"},
			{ _id: 5, name: "Teriyaki"},
			{ _id: 6, name: "Skhug"},
			{ _id: 7, name: "Vinaigrette"},
			{ _id: 8, name: "Garlic butter"},
			{ _id: 9, name: "Mayonnaise"},
			{ _id: 10, name: "Jam"},
			{ _id: 11, name: "Parmesan"},
			{ _id: 12, name: "Raw tahini"},
			{ _id: 13, name: "Garlic sauce"},
			{ _id: 14, name: "Thousand Islands"},
			{ _id: 15, name: "Ketchup"},
			{ _id: 16, name: "Spicy pepper salsa"}
])

db.salades.insertMany([
	{ _id: 0, 
	name: "No salad"},
	{ _id: 1, 
	name: "Chopped salad",
	description: "tomato, cucumber, onion, parsley, olive oil & lemon" },
	{ _id: 2, 
	name: "Green salad", 
	description: "lettuce mix, sliced cucumber, cherry tomatoes, citrus vinaigrette, rice crisps, red & white cabbage" },
	{ _id: 3, 
	name: "Galilee salad",
	description: "red quinoa, black lentils, greens, cranberries, almonds" }
])
